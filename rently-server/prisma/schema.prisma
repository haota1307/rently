generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                                             Int                   @id @default(autoincrement())
  name                                           String
  avatar                                         String?
  phoneNumber                                    String?
  email                                          String                @unique
  password                                       String
  status                                         UserStatus            @default(INACTIVE)
  balance                                        Int                   @default(0)
  roleId                                         Int
  deletedAt                                      DateTime?
  createdAt                                      DateTime              @default(now()) @db.Timestamptz(6)
  updatedAt                                      DateTime              @updatedAt @db.Timestamptz(6)
  createdById                                    Int?
  deletedById                                    Int?
  updatedById                                    Int?
  ChatbotMessage                                 ChatbotMessage[]
  comments                                       Comment[]
  respondedContacts                              Contact[]             @relation("UserRespondedContacts")
  Contact                                        Contact[]
  ContractAttachment                             ContractAttachment[]
  conversationsOne                               Conversation[]        @relation("UserOneConversations")
  conversationsTwo                               Conversation[]        @relation("UserTwoConversations")
  conversationMessages                           ConversationMessage[]
  favorites                                      Favorite[]
  notifications                                  Notification[]
  payments                                       Payment[]
  paymentTransactions                            PaymentTransaction[]
  PermissionCreatedBy                            Permission[]          @relation("PermissionCreatedBy")
  deletedPermissions                             Permission[]          @relation("PermissionDeletedBy")
  PermissionUpdatedBy                            Permission[]          @relation("PermissionUpdatedBy")
  Permission                                     Permission[]
  processedReports                               PostReport[]          @relation("ProcessedReports")
  reportedPosts                                  PostReport[]          @relation("UserReports")
  PostReport                                     PostReport[]
  refreshTokens                                  RefreshToken[]
  rentals                                        Rental[]              @relation("LandlordRentals")
  RentalContract_RentalContract_landlordIdToUser RentalContract[]      @relation("RentalContract_landlordIdToUser")
  RentalContract_RentalContract_tenantIdToUser   RentalContract[]      @relation("RentalContract_tenantIdToUser")
  rentalPosts                                    RentalPost[]          @relation("LandlordRentalPosts")
  landlordRentalRequests                         RentalRequest[]       @relation("LandlordRentalRequests")
  tenantRentalRequests                           RentalRequest[]       @relation("TenantRentalRequests")
  reviews                                        Review[]              @relation("TenantReviews")
  RoleCreatedBy                                  Role[]                @relation("RoleCreatedBy")
  Role                                           Role[]                @relation("RoledeletedByIdBy")
  RoleUpdatedBy                                  Role[]                @relation("RoleUpdatedBy")
  processedRequests                              RoleUpgradeRequest[]  @relation("ProcessedRequests")
  roleUpgradeRequests                            RoleUpgradeRequest[]
  createdSettings                                SystemSetting[]       @relation("SettingCreatedBy")
  updatedSettings                                SystemSetting[]       @relation("SettingUpdatedBy")
  createdBy                                      User?                 @relation("CreatorUsers", fields: [createdById], references: [id], onUpdate: NoAction)
  createdUsers                                   User[]                @relation("CreatorUsers")
  deletedBy                                      User?                 @relation("DeletorUsers", fields: [deletedById], references: [id], onUpdate: NoAction)
  deletedUsers                                   User[]                @relation("DeletorUsers")
  role                                           Role                  @relation(fields: [roleId], references: [id])
  updatedBy                                      User?                 @relation("UpdatorUsers", fields: [updatedById], references: [id], onUpdate: NoAction)
  updatedUsers                                   User[]                @relation("UpdatorUsers")
  landlordViewingSchedules                       ViewingSchedule[]     @relation("LandlordViewingSchedules")
  tenantViewingSchedules                         ViewingSchedule[]     @relation("TenantViewingSchedules")

  @@index([name])
  @@index([status])
  @@index([phoneNumber])
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(500)
  description String       @default("")
  isActive    Boolean      @default(true)
  createdById Int?
  updatedById Int?
  deletedAt   DateTime?
  createdAt   DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime     @updatedAt @db.Timestamptz(6)
  deletedById Int?
  createdBy   User?        @relation("RoleCreatedBy", fields: [createdById], references: [id])
  deletedBy   User?        @relation("RoledeletedByIdBy", fields: [deletedById], references: [id])
  updatedBy   User?        @relation("RoleUpdatedBy", fields: [updatedById], references: [id])
  users       User[]
  permissions Permission[] @relation("PermissionToRole")

  @@index([name])
}

model Permission {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(500)
  description String     @default("")
  path        String     @db.VarChar(1000)
  method      HTTPMethod
  createdById Int?
  updatedById Int?
  deletedAt   DateTime?
  createdAt   DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime   @updatedAt @db.Timestamptz(6)
  deletedById Int?
  userId      Int?
  module      String     @default("") @db.VarChar(500)
  createdBy   User?      @relation("PermissionCreatedBy", fields: [createdById], references: [id])
  deletedBy   User?      @relation("PermissionDeletedBy", fields: [deletedById], references: [id], onUpdate: NoAction)
  updatedBy   User?      @relation("PermissionUpdatedBy", fields: [updatedById], references: [id])
  User        User?      @relation(fields: [userId], references: [id])
  roles       Role[]     @relation("PermissionToRole")

  @@index([name])
  @@index([path])
  @@index([deletedAt])
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expiresAt DateTime @db.Timestamptz(6)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}

model VerificationCode {
  id        Int                  @id @default(autoincrement())
  email     String               @unique @db.VarChar(500)
  code      String               @db.VarChar(50)
  type      VerificationCodeType
  expiresAt DateTime             @db.Timestamptz(6)
  createdAt DateTime             @default(now()) @db.Timestamptz(6)

  @@index([email, code, type])
  @@index([expiresAt])
}

model Rental {
  id           Int           @id @default(autoincrement())
  title        String
  description  String
  address      String
  lat          Decimal
  lng          Decimal
  createdAt    DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime      @updatedAt @db.Timestamptz(6)
  landlordId   Int
  distance     Decimal?
  favorites    Favorite[]
  landlord     User          @relation("LandlordRentals", fields: [landlordId], references: [id], onDelete: Cascade)
  rentalImages RentalImage[]
  rentalPosts  RentalPost[]
  rooms        Room[]

  @@index([landlordId])
  @@index([title])
  @@index([createdAt])
}

model Room {
  id             Int              @id @default(autoincrement())
  title          String
  price          Decimal
  isAvailable    Boolean          @default(true)
  createdAt      DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime         @updatedAt @db.Timestamptz(6)
  rentalId       Int
  area           Int
  RentalContract RentalContract[]
  RentalPost     RentalPost[]
  reviews        Review[]
  rental         Rental           @relation(fields: [rentalId], references: [id], onDelete: Cascade)
  roomAmenities  RoomAmenity[]
  roomImages     RoomImage[]

  @@index([rentalId])
  @@index([isAvailable])
  @@index([price])
}

model RentalImage {
  id        Int      @id @default(autoincrement())
  imageUrl  String
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  rentalId  Int
  order     Int
  rental    Rental   @relation(fields: [rentalId], references: [id], onDelete: Cascade)

  @@index([rentalId])
  @@index([createdAt])
  @@index([order])
}

model RoomImage {
  id        Int      @id @default(autoincrement())
  imageUrl  String
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  order     Int
  roomId    Int
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@index([roomId])
  @@index([createdAt])
  @@index([order])
}

model Amenity {
  id            Int           @id @default(autoincrement())
  name          String        @unique
  createdAt     DateTime      @default(now()) @db.Timestamptz(6)
  roomAmenities RoomAmenity[]

  @@index([name])
}

model RoomAmenity {
  id        Int     @id @default(autoincrement())
  roomId    Int
  amenityId Int
  amenity   Amenity @relation(fields: [amenityId], references: [id], onDelete: Cascade)
  room      Room    @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([roomId, amenityId])
}

model RentalPost {
  id               Int               @id @default(autoincrement())
  startDate        DateTime
  endDate          DateTime
  pricePaid        Decimal
  createdAt        DateTime          @default(now()) @db.Timestamptz(6)
  rentalId         Int
  landlordId       Int
  description      String
  roomId           Int
  status           RentalPostStatus  @default(ACTIVE)
  title            String            @db.VarChar(250)
  deposit          Decimal           @default(0)
  comments         Comment[]
  PostReport       PostReport[]
  landlord         User              @relation("LandlordRentalPosts", fields: [landlordId], references: [id], onDelete: Cascade)
  rental           Rental            @relation(fields: [rentalId], references: [id], onDelete: Cascade)
  room             Room              @relation(fields: [roomId], references: [id], onDelete: Cascade)
  rentalRequests   RentalRequest[]
  viewingSchedules ViewingSchedule[]

  @@index([rentalId])
  @@index([landlordId])
  @@index([startDate])
}

model Payment {
  id            Int                 @id @default(autoincrement())
  amount        Int
  status        PaymentStatus
  description   String?
  createdAt     DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime            @updatedAt @db.Timestamptz(6)
  userId        Int
  transactionId Int?                @unique
  metadata      Json?
  transaction   PaymentTransaction? @relation(fields: [transactionId], references: [id])
  user          User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@index([status, userId])
  @@index([createdAt, status])
  @@index([createdAt, status], map: "payment_created_status_idx")
  @@index([status], map: "payment_status_idx")
}

model PaymentTransaction {
  id                 Int      @id @default(autoincrement())
  gateway            String   @db.VarChar(100)
  transactionDate    DateTime @default(now()) @db.Timestamptz(6)
  accountNumber      String?  @db.VarChar(100)
  subAccount         String?  @db.VarChar(250)
  amountIn           Int      @default(0)
  amountOut          Int      @default(0)
  accumulated        Int      @default(0)
  code               String?  @db.VarChar(250)
  transactionContent String?
  referenceNumber    String?  @db.VarChar(255)
  body               String?
  createdAt          DateTime @default(now()) @db.Timestamptz(6)
  userId             Int?
  payment            Payment?
  user               User?    @relation(fields: [userId], references: [id])

  @@index([transactionDate])
  @@index([gateway])
  @@index([accountNumber])
  @@index([userId])
  @@index([transactionDate, transactionContent])
  @@index([transactionDate, userId, transactionContent])
  @@index([transactionContent])
  @@index([transactionContent], map: "payment_transaction_content_idx")
  @@index([transactionDate, transactionContent], map: "payment_transaction_date_content_idx")
}

model Conversation {
  id        Int                   @id @default(autoincrement())
  createdAt DateTime              @default(now()) @db.Timestamptz(6)
  userOneId Int
  userTwoId Int
  userOne   User                  @relation("UserOneConversations", fields: [userOneId], references: [id], onDelete: Cascade)
  userTwo   User                  @relation("UserTwoConversations", fields: [userTwoId], references: [id], onDelete: Cascade)
  messages  ConversationMessage[]

  @@index([userOneId])
  @@index([userTwoId])
  @@index([userOneId, userTwoId])
}

model ConversationMessage {
  id             Int          @id @default(autoincrement())
  content        String
  isRead         Boolean      @default(false)
  createdAt      DateTime     @default(now()) @db.Timestamptz(6)
  conversationId Int
  senderId       Int
  fileName       String?
  fileSize       Int?
  fileType       String?
  fileUrl        String?
  thumbnailUrl   String?
  type           String?      @default("TEXT")
  isDeleted      Boolean      @default(false)
  isEdited       Boolean      @default(false)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User         @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([senderId])
  @@index([isRead])
  @@index([createdAt])
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  roomId    Int
  tenantId  Int
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  tenant    User     @relation("TenantReviews", fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([roomId])
  @@index([tenantId])
}

model Favorite {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  userId    Int
  rentalId  Int
  rental    Rental   @relation(fields: [rentalId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, rentalId])
}

model Comment {
  id        Int        @id @default(autoincrement())
  content   String
  createdAt DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt DateTime   @updatedAt @db.Timestamptz(6)
  deletedAt DateTime?
  userId    Int
  postId    Int
  parentId  Int?
  parent    Comment?   @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comment[]  @relation("CommentReplies")
  post      RentalPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([postId])
  @@index([parentId])
  @@index([createdAt])
}

model RoleUpgradeRequest {
  id            Int                      @id @default(autoincrement())
  status        RoleUpgradeRequestStatus @default(PENDING)
  reason        String?
  createdAt     DateTime                 @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime                 @updatedAt @db.Timestamptz(6)
  userId        Int
  processedById Int?
  frontImage    String
  backImage     String
  note          String?
  processedBy   User?                    @relation("ProcessedRequests", fields: [processedById], references: [id])
  user          User                     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model ViewingSchedule {
  id                        Int        @id @default(autoincrement())
  postId                    Int
  tenantId                  Int
  landlordId                Int
  viewingDate               DateTime   @db.Timestamptz(6)
  status                    String     @default("PENDING")
  rescheduledDate           DateTime?  @db.Timestamptz(6)
  note                      String?
  requireTenantConfirmation Boolean    @default(false)
  createdAt                 DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt                 DateTime   @updatedAt @db.Timestamptz(6)
  landlord                  User       @relation("LandlordViewingSchedules", fields: [landlordId], references: [id])
  post                      RentalPost @relation(fields: [postId], references: [id])
  tenant                    User       @relation("TenantViewingSchedules", fields: [tenantId], references: [id])

  @@index([postId])
  @@index([tenantId])
  @@index([landlordId])
}

model RentalRequest {
  id               Int                 @id @default(autoincrement())
  postId           Int
  tenantId         Int
  landlordId       Int
  status           RentalRequestStatus @default(PENDING)
  note             String?
  expectedMoveDate DateTime            @db.Timestamptz(6)
  duration         Int
  depositAmount    Decimal?
  contractSigned   Boolean             @default(false)
  rejectionReason  String?
  createdAt        DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime            @updatedAt @db.Timestamptz(6)
  RentalContract   RentalContract?
  landlord         User                @relation("LandlordRentalRequests", fields: [landlordId], references: [id])
  post             RentalPost          @relation(fields: [postId], references: [id])
  tenant           User                @relation("TenantRentalRequests", fields: [tenantId], references: [id])

  @@index([postId])
  @@index([tenantId])
  @@index([landlordId])
  @@index([status])
  @@index([createdAt])
}

model Notification {
  id          Int              @id @default(autoincrement())
  userId      Int
  type        NotificationType
  title       String
  message     String
  isRead      Boolean          @default(false)
  relatedId   Int?
  relatedType String?
  deepLink    String?
  createdAt   DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime         @updatedAt @db.Timestamptz(6)
  user        User             @relation(fields: [userId], references: [id])

  @@index([userId])
}

model ChatbotMessage {
  id        Int      @id @default(autoincrement())
  message   String
  response  String
  criteria  Json?
  results   Json?
  isRead    Boolean  @default(true)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([createdAt])
}

model PostReport {
  id            Int          @id @default(autoincrement())
  reason        String
  description   String?
  status        ReportStatus @default(PENDING)
  createdAt     DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime     @updatedAt @db.Timestamptz(6)
  processedAt   DateTime?    @db.Timestamptz(6)
  postId        Int
  reportedById  Int
  processedById Int?
  userId        Int?
  post          RentalPost   @relation(fields: [postId], references: [id], onDelete: Cascade)
  processedBy   User?        @relation("ProcessedReports", fields: [processedById], references: [id])
  reportedBy    User         @relation("UserReports", fields: [reportedById], references: [id], onDelete: Cascade)
  User          User?        @relation(fields: [userId], references: [id])

  @@index([postId])
  @@index([reportedById])
  @@index([status])
  @@index([createdAt])
}

model SystemSetting {
  id          Int      @id @default(autoincrement())
  key         String   @unique
  value       String
  type        String   @default("string")
  group       String
  description String?
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @db.Timestamptz(6)
  createdById Int?
  updatedById Int?
  createdBy   User?    @relation("SettingCreatedBy", fields: [createdById], references: [id])
  updatedBy   User?    @relation("SettingUpdatedBy", fields: [updatedById], references: [id])

  @@index([key])
  @@index([group])
}

model Contact {
  id            Int           @id @default(autoincrement())
  fullName      String
  email         String
  phoneNumber   String?
  subject       String
  message       String
  status        ContactStatus @default(PENDING)
  response      String?
  createdAt     DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime      @updatedAt @db.Timestamptz(6)
  respondedAt   DateTime?     @db.Timestamptz(6)
  respondedById Int?
  userId        Int?
  respondedBy   User?         @relation("UserRespondedContacts", fields: [respondedById], references: [id])
  User          User?         @relation(fields: [userId], references: [id])

  @@index([status])
  @@index([email])
  @@index([createdAt])
}

model ContractAttachment {
  id             Int            @id @default(autoincrement())
  contractId     Int
  fileUrl        String
  fileName       String
  fileType       String
  uploadedBy     Int
  createdAt      DateTime       @default(now()) @db.Timestamptz(6)
  RentalContract RentalContract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  User           User           @relation(fields: [uploadedBy], references: [id])

  @@index([contractId])
  @@index([uploadedBy])
}

model RentalContract {
  id                                   Int                  @id @default(autoincrement())
  contractNumber                       String               @unique
  rentalRequestId                      Int                  @unique
  roomId                               Int
  landlordId                           Int
  tenantId                             Int
  startDate                            DateTime             @db.Timestamptz(6)
  endDate                              DateTime             @db.Timestamptz(6)
  monthlyRent                          Decimal              @db.Decimal(10, 2)
  deposit                              Decimal              @db.Decimal(10, 2)
  paymentDueDate                       Int
  contractContent                      String
  terms                                Json?
  landlordSignedAt                     DateTime?            @db.Timestamptz(6)
  tenantSignedAt                       DateTime?            @db.Timestamptz(6)
  status                               ContractStatus       @default(DRAFT)
  createdAt                            DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt                            DateTime             @db.Timestamptz(6)
  ContractAttachment                   ContractAttachment[]
  User_RentalContract_landlordIdToUser User                 @relation("RentalContract_landlordIdToUser", fields: [landlordId], references: [id])
  RentalRequest                        RentalRequest        @relation(fields: [rentalRequestId], references: [id])
  Room                                 Room                 @relation(fields: [roomId], references: [id])
  User_RentalContract_tenantIdToUser   User                 @relation("RentalContract_tenantIdToUser", fields: [tenantId], references: [id])

  @@index([createdAt])
  @@index([endDate])
  @@index([landlordId])
  @@index([startDate])
  @@index([status])
  @@index([tenantId])
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum VerificationCodeType {
  REGISTER
  FORGOT_PASSWORD
}

enum HTTPMethod {
  GET
  POST
  PUT
  DELETE
  PATCH
  OPTIONS
  HEAD
}

enum RoleUpgradeRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELED
}

enum RentalPostStatus {
  ACTIVE
  INACTIVE
  DELETED
  SUSPENDED
}

enum RentalRequestStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELED
}

enum NotificationType {
  PAYMENT
  INTERACTION
  RENTAL_REQUEST
  VIEWING_SCHEDULE
  POST
  SYSTEM
}

enum ReportStatus {
  PENDING
  PROCESSED
  REJECTED
}

enum ContactStatus {
  PENDING
  RESPONDED
  CLOSED
}

enum ContractStatus {
  DRAFT
  AWAITING_LANDLORD_SIGNATURE
  AWAITING_TENANT_SIGNATURE
  ACTIVE
  EXPIRED
  TERMINATED
  RENEWED
}
