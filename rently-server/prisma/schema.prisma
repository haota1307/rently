generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum VerificationCodeType {
  REGISTER
  FORGOT_PASSWORD
}

enum HTTPMethod {
  GET
  POST
  PUT
  DELETE
  PATCH
  OPTIONS
  HEAD
}

model User {
  id          Int        @id @default(autoincrement())
  name        String
  avatar      String?
  phoneNumber String?
  email       String     @unique
  password    String
  status      UserStatus @default(INACTIVE)
  balance     Int        @default(0)
  roleId      Int

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  role Role @relation(fields: [roleId], references: [id])

  refreshTokens        RefreshToken[]
  rentals              Rental[]              @relation("LandlordRentals")
  rentalPosts          RentalPost[]          @relation("LandlordRentalPosts")
  sentMessages         Message[]             @relation("SentMessages")
  receivedMessages     Message[]             @relation("ReceivedMessages")
  conversationsOne     Conversation[]        @relation("UserOneConversations")
  conversationsTwo     Conversation[]        @relation("UserTwoConversations")
  conversationMessages ConversationMessage[]
  reviews              Review[]              @relation("TenantReviews")
  favorites            Favorite[]
  RoleCreatedBy        Role[]                @relation("RoleCreatedBy")
  RoleUpdatedBy        Role[]                @relation("RoleUpdatedBy")
  PermissionCreatedBy  Permission[]          @relation("PermissionCreatedBy")
  PermissionUpdatedBy  Permission[]          @relation("PermissionUpdatedBy")
  Permission           Permission[]
  deletedPermissions   Permission[]          @relation("PermissionDeletedBy")

  @@index([name])
  @@index([status])
  @@index([phoneNumber])
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique @db.VarChar(500)
  description String
  isActive    Boolean      @default(true)
  // Một Role có nhiều quyền và nhiều user
  permissions Permission[]
  users       User[]

  createdById Int?
  createdBy   User? @relation("RoleCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  updatedById Int?
  updatedBy   User? @relation("RoleUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([name])
}

model Permission {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(500)
  description String     @default("")
  path        String     @db.VarChar(1000)
  method      HTTPMethod
  roles       Role[]

  createdById Int?
  createdBy   User? @relation("PermissionCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  updatedById Int?
  updatedBy   User? @relation("PermissionUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)
  deletedById Int?
  deletedBy   User? @relation("PermissionDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  User      User?     @relation(fields: [userId], references: [id])
  userId    Int?

  @@index([name])
  @@index([path])
  @@index([deletedAt])
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  @@index([userId])
  @@index([expiresAt])
}

model VerificationCode {
  id    Int                  @id @default(autoincrement())
  email String               @unique @db.VarChar(500)
  code  String               @db.VarChar(50)
  type  VerificationCodeType

  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([email, code, type])
  @@index([expiresAt])
}

model Rental {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  address     String
  lat         Decimal
  lng         Decimal
  createdAt   DateTime
  updatedAt   DateTime

  landlord     User          @relation("LandlordRentals", fields: [landlordId], references: [id], onDelete: Cascade)
  landlordId   Int
  rooms        Room[]
  rentalImages RentalImage[]
  rentalPosts  RentalPost[]
  favorites    Favorite[]

  @@index([landlordId])
  @@index([title])
  @@index([createdAt])
}

model Room {
  id          Int      @id @default(autoincrement())
  title       String
  price       Decimal
  area        String
  isAvailable Boolean  @default(true)
  createdAt   DateTime
  updatedAt   DateTime

  rental   Rental @relation(fields: [rentalId], references: [id], onDelete: Cascade)
  rentalId Int

  roomAmenities RoomAmenity[]
  reviews       Review[]

  @@index([rentalId])
  @@index([isAvailable])
  @@index([price])
}

model RentalImage {
  id        Int      @id @default(autoincrement())
  imageUrl  String
  createdAt DateTime

  rental   Rental @relation(fields: [rentalId], references: [id], onDelete: Cascade)
  rentalId Int

  @@index([rentalId])
  @@index([createdAt])
}

model Amenity {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime

  roomAmenities RoomAmenity[]

  @@index([name])
}

model RoomAmenity {
  id Int @id @default(autoincrement())

  room   Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId Int

  amenity   Amenity @relation(fields: [amenityId], references: [id], onDelete: Cascade)
  amenityId Int

  @@unique([roomId, amenityId])
}

model RentalPost {
  id        Int      @id @default(autoincrement())
  startDate DateTime
  endDate   DateTime
  pricePaid Decimal
  createdAt DateTime

  rental   Rental @relation(fields: [rentalId], references: [id], onDelete: Cascade)
  rentalId Int

  landlord   User @relation("LandlordRentalPosts", fields: [landlordId], references: [id], onDelete: Cascade)
  landlordId Int

  @@index([rentalId])
  @@index([landlordId])
  @@index([startDate])
}

model PaymentTransaction {
  id                 Int      @id @default(autoincrement())
  gateway            String   @db.VarChar(100)
  transactionDate    DateTime @default(now())
  accountNumber      String   @db.VarChar(100)
  subAccount         String?  @db.VarChar(250)
  amountIn           Int      @default(0)
  amountOut          Int      @default(0)
  accumulated        Int      @default(0)
  code               String?  @db.VarChar(250)
  transactionContent String?  @db.Text
  referenceNumber    String?  @db.VarChar(255)
  body               String?  @db.Text
  createdAt          DateTime @default(now())

  @@index([transactionDate])
  @@index([gateway])
  @@index([accountNumber])
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime

  sender     User @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  senderId   Int
  receiver   User @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId Int

  @@index([senderId])
  @@index([receiverId])
  @@index([isRead])
}

model Conversation {
  id        Int      @id @default(autoincrement())
  createdAt DateTime

  userOne   User @relation("UserOneConversations", fields: [userOneId], references: [id], onDelete: Cascade)
  userOneId Int
  userTwo   User @relation("UserTwoConversations", fields: [userTwoId], references: [id], onDelete: Cascade)
  userTwoId Int

  messages ConversationMessage[]

  @@index([userOneId])
  @@index([userTwoId])
  @@index([userOneId, userTwoId])
}

model ConversationMessage {
  id        Int      @id @default(autoincrement())
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime

  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId Int

  sender   User @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId Int

  @@index([conversationId])
  @@index([senderId])
  @@index([isRead])
  @@index([createdAt])
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String
  createdAt DateTime

  room   Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId Int

  tenant   User @relation("TenantReviews", fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId Int

  @@index([roomId])
  @@index([tenantId])
}

model Favorite {
  id        Int      @id @default(autoincrement())
  createdAt DateTime

  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  rental   Rental @relation(fields: [rentalId], references: [id], onDelete: Cascade)
  rentalId Int

  @@unique([userId, rentalId])
}
