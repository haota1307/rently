const { PrismaClient } = require('@prisma/client')
const bcrypt = require('bcrypt')

const prisma = new PrismaClient()

// Sample data
const SAMPLE_USERS = [
  { name: 'Nguy·ªÖn VƒÉn A', email: 'nguyenvana@gmail.com', phone: '0901234567' },
  { name: 'Tr·∫ßn Th·ªã B', email: 'tranthib@gmail.com', phone: '0902345678' },
  { name: 'L√™ VƒÉn C', email: 'levanc@gmail.com', phone: '0903456789' },
  { name: 'Ph·∫°m Th·ªã D', email: 'phamthid@gmail.com', phone: '0904567890' },
  { name: 'Ho√†ng VƒÉn E', email: 'hoangvane@gmail.com', phone: '0905678901' },
]

const SAMPLE_ADDRESSES = [
  {
    district: 'Ninh Ki·ªÅu',
    ward: 'An H√≤a',
    street: 'ƒê∆∞·ªùng 3/2',
    lat: 10.0301,
    lng: 105.7685,
  },
  {
    district: 'Ninh Ki·ªÅu',
    ward: 'An C∆∞',
    street: 'ƒê∆∞·ªùng Nguy·ªÖn VƒÉn C·ª´',
    lat: 10.0251,
    lng: 105.7595,
  },
  {
    district: 'Ninh Ki·ªÅu',
    ward: 'Xu√¢n Kh√°nh',
    street: 'ƒê∆∞·ªùng V√µ VƒÉn Ki·ªát',
    lat: 10.0201,
    lng: 105.7505,
  },
  {
    district: 'C√°i RƒÉng',
    ward: 'Ba L√°ng',
    street: 'ƒê∆∞·ªùng Tr·∫ßn H∆∞ng ƒê·∫°o',
    lat: 10.0401,
    lng: 105.7785,
  },
  {
    district: 'C√°i RƒÉng',
    ward: 'L√™ B√¨nh',
    street: 'ƒê∆∞·ªùng C√°ch M·∫°ng Th√°ng 8',
    lat: 10.0451,
    lng: 105.7885,
  },
]

const SAMPLE_AMENITIES = [
  'WiFi mi·ªÖn ph√≠',
  'M√°y l·∫°nh',
  'T·ªß l·∫°nh',
  'M√°y gi·∫∑t chung',
  'B√£i ƒë·∫≠u xe',
  'An ninh 24/7',
  'Thang m√°y',
  'Ban c√¥ng',
  'C·ª≠a s·ªï',
  'Nh√† v·ªá sinh ri√™ng',
  'B·∫øp chung',
  'Gi∆∞·ªùng',
  'T·ªß qu·∫ßn √°o',
  'B√†n h·ªçc',
  'K·ªá s√°ch',
]

const ROOM_TYPES = [
  { name: 'Ph√≤ng ƒë∆°n', basePrice: 2000000, baseArea: 15 },
  { name: 'Ph√≤ng ƒë√¥i', basePrice: 3000000, baseArea: 20 },
  { name: 'Ph√≤ng VIP', basePrice: 4000000, baseArea: 25 },
  { name: 'Studio', basePrice: 5000000, baseArea: 30 },
  { name: 'Mini apartment', basePrice: 6000000, baseArea: 35 },
]

// T·ªça ƒë·ªô ƒëi·ªÉm tham chi·∫øu (ƒê·∫°i h·ªçc Nam C·∫ßn Th∆°)
const REFERENCE_POINT = {
  lat: 10.03012,
  lng: 105.76852,
  name: 'ƒê·∫°i h·ªçc Nam C·∫ßn Th∆°',
}

/**
 * T√≠nh kho·∫£ng c√°ch gi·ªØa 2 ƒëi·ªÉm s·ª≠ d·ª•ng c√¥ng th·ª©c Haversine
 * @param {number} lat1 - Latitude ƒëi·ªÉm 1
 * @param {number} lng1 - Longitude ƒëi·ªÉm 1
 * @param {number} lat2 - Latitude ƒëi·ªÉm 2
 * @param {number} lng2 - Longitude ƒëi·ªÉm 2
 * @returns {number} - Kho·∫£ng c√°ch t√≠nh b·∫±ng kilomet
 */
function calculateDistance(lat1, lng1, lat2, lng2) {
  const R = 6371e3 // B√°n k√≠nh Tr√°i ƒê·∫•t t√≠nh b·∫±ng m√©t
  const œÜ1 = (lat1 * Math.PI) / 180 // œÜ, Œª in radians
  const œÜ2 = (lat2 * Math.PI) / 180
  const ŒîœÜ = ((lat2 - lat1) * Math.PI) / 180
  const ŒîŒª = ((lng2 - lng1) * Math.PI) / 180

  const a =
    Math.sin(ŒîœÜ / 2) * Math.sin(ŒîœÜ / 2) +
    Math.cos(œÜ1) * Math.cos(œÜ2) * Math.sin(ŒîŒª / 2) * Math.sin(ŒîŒª / 2)
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))

  const distanceInMeters = R * c // in metres
  const distanceInKm = distanceInMeters / 1000 // chuy·ªÉn sang km
  return Math.round(distanceInKm * 10) / 10 // L√†m tr√≤n ƒë·∫øn 1 ch·ªØ s·ªë th·∫≠p ph√¢n
}

function randomInRange(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min
}

function randomPrice(basePrice) {
  const variation = 0.3
  const min = basePrice * (1 - variation)
  const max = basePrice * (1 + variation)
  return Math.floor(randomInRange(min, max) / 100000) * 100000
}

function randomArea(baseArea) {
  const variation = 0.4
  const min = baseArea * (1 - variation)
  const max = baseArea * (1 + variation)
  return Math.floor(randomInRange(min, max))
}

function randomSubset(array, count) {
  const shuffled = [...array].sort(() => 0.5 - Math.random())
  return shuffled.slice(0, count)
}

function generatePostTitle(userName, rentalIndex, roomIndex, roomType) {
  const titles = [
    `${roomType} t·∫°i nh√† tr·ªç ${userName} ${rentalIndex + 1} - Ph√≤ng ${roomIndex + 1}`,
    `Cho thu√™ ${roomType.toLowerCase()} ƒë·∫πp g·∫ßn ƒêH Nam C·∫ßn Th∆°`,
    `${roomType} full n·ªôi th·∫•t, an ninh t·ªët`,
    `Ph√≤ng tr·ªç sinh vi√™n gi√° r·∫ª - ${roomType}`,
    `${roomType} m·ªõi x√¢y, s·∫°ch s·∫Ω, tho√°ng m√°t`,
  ]
  return titles[randomInRange(0, titles.length - 1)]
}

function generateDescription(roomType, amenities) {
  const descriptions = [
    `${roomType} ƒë∆∞·ª£c thi·∫øt k·∫ø hi·ªán ƒë·∫°i, ƒë·∫ßy ƒë·ªß ti·ªán nghi. Khu v·ª±c an ninh, g·∫ßn tr∆∞·ªùng h·ªçc v√† c√°c ti·ªán √≠ch c√¥ng c·ªông.`,
    `Ph√≤ng s·∫°ch s·∫Ω, tho√°ng m√°t v·ªõi ${amenities.slice(0, 3).join(', ')}. Th√≠ch h·ª£p cho sinh vi√™n v√† ng∆∞·ªùi ƒëi l√†m.`,
    `${roomType} c√≥ v·ªã tr√≠ thu·∫≠n l·ª£i, giao th√¥ng d·ªÖ d√†ng. Ch·ªß nh√† th√¢n thi·ªán, h·ªó tr·ª£ t·∫≠n t√¨nh.`,
    `Kh√¥ng gian s·ªëng l√Ω t∆∞·ªüng v·ªõi ƒë·∫ßy ƒë·ªß ti·ªán √≠ch. Gi√° c·∫£ h·ª£p l√Ω, ph√π h·ª£p v·ªõi t√∫i ti·ªÅn sinh vi√™n.`,
    `Ph√≤ng m·ªõi x√¢y, n·ªôi th·∫•t c∆° b·∫£n ƒë·∫ßy ƒë·ªß. Khu v·ª±c y√™n tƒ©nh, th√≠ch h·ª£p ngh·ªâ ng∆°i v√† h·ªçc t·∫≠p.`,
  ]
  return descriptions[randomInRange(0, descriptions.length - 1)]
}

async function createAmenities() {
  console.log('üîß Creating amenities...')

  const existingAmenities = await prisma.amenity.findMany()
  const existingNames = existingAmenities.map(a => a.name)

  const newAmenities = SAMPLE_AMENITIES.filter(
    name => !existingNames.includes(name)
  )

  if (newAmenities.length > 0) {
    await prisma.amenity.createMany({
      data: newAmenities.map(name => ({ name })),
      skipDuplicates: true,
    })
    console.log(`‚úÖ Created ${newAmenities.length} new amenities`)
  } else {
    console.log('‚úÖ All amenities already exist')
  }
}

async function getLandlordRoleId() {
  const landlordRole = await prisma.role.findFirst({
    where: { name: 'LANDLORD' },
  })

  if (!landlordRole) {
    throw new Error(
      'LANDLORD role not found. Please run: npm run create-permissions first.'
    )
  }

  return landlordRole.id
}

async function createUsers() {
  console.log('üë• Creating users...')

  const landlordRoleId = await getLandlordRoleId()
  const users = []
  const hashedPassword = await bcrypt.hash('123456', 10)

  for (const userData of SAMPLE_USERS) {
    const existingUser = await prisma.user.findUnique({
      where: { email: userData.email },
    })

    if (!existingUser) {
      const user = await prisma.user.create({
        data: {
          email: userData.email,
          password: hashedPassword,
          name: userData.name,
          phoneNumber: userData.phone,
          status: 'ACTIVE',
          roleId: landlordRoleId,
        },
      })
      users.push(user)
      console.log(`‚úÖ Created user: ${user.name}`)
    } else {
      users.push(existingUser)
      console.log(`‚è≠Ô∏è  User already exists: ${existingUser.name}`)
    }
  }

  return users
}

async function createRentalsAndRooms(users) {
  console.log('üè† Creating rentals and rooms...')

  const allAmenities = await prisma.amenity.findMany()
  const createdData = {
    rentals: [],
    rooms: [],
    posts: [],
  }

  for (let userIndex = 0; userIndex < users.length; userIndex++) {
    const user = users[userIndex]
    console.log(`\nüìç Creating rentals for ${user.name}...`)

    for (let rentalIndex = 0; rentalIndex < 5; rentalIndex++) {
      const address = SAMPLE_ADDRESSES[rentalIndex % SAMPLE_ADDRESSES.length]
      const rentalTitle = `Nh√† tr·ªç ${user.name} ${rentalIndex + 1}`

      const latVariation = (Math.random() - 0.5) * 0.01
      const lngVariation = (Math.random() - 0.5) * 0.01

      const rentalLat = address.lat + latVariation
      const rentalLng = address.lng + lngVariation

      // T√≠nh kho·∫£ng c√°ch t·ª´ rental ƒë·∫øn ƒê·∫°i h·ªçc Nam C·∫ßn Th∆°
      const distanceToUniversity = calculateDistance(
        rentalLat,
        rentalLng,
        REFERENCE_POINT.lat,
        REFERENCE_POINT.lng
      )

      const rental = await prisma.rental.create({
        data: {
          title: rentalTitle,
          address: `${randomInRange(1, 999)} ${address.street}, ${address.ward}, ${address.district}, C·∫ßn Th∆°`,
          lat: rentalLat,
          lng: rentalLng,
          distance: distanceToUniversity, // Th√™m field distance t√≠nh b·∫±ng km
          landlordId: user.id,
          description: `Nh√† tr·ªç ch·∫•t l∆∞·ª£ng t·∫°i ${address.district}, g·∫ßn c√°c tr∆∞·ªùng ƒë·∫°i h·ªçc v√† ti·ªán √≠ch c√¥ng c·ªông. C√°ch ${REFERENCE_POINT.name} ${distanceToUniversity}km.`,
        },
      })

      createdData.rentals.push(rental)
      console.log(
        `  ‚úÖ Created rental: ${rentalTitle} (${Math.round(distanceToUniversity)}m to ${REFERENCE_POINT.name})`
      )

      for (let roomIndex = 0; roomIndex < 5; roomIndex++) {
        const roomType = ROOM_TYPES[roomIndex % ROOM_TYPES.length]
        const price = randomPrice(roomType.basePrice)
        const area = randomArea(roomType.baseArea)
        const selectedAmenities = randomSubset(
          allAmenities,
          randomInRange(3, 8)
        )

        const room = await prisma.room.create({
          data: {
            title: `${roomType.name} ${roomIndex + 1}`,
            price: price,
            area: area,
            isAvailable: Math.random() > 0.2,
            rentalId: rental.id,
            roomAmenities: {
              create: selectedAmenities.map(amenity => ({
                amenityId: amenity.id,
              })),
            },
          },
        })

        createdData.rooms.push(room)

        const postTitle = generatePostTitle(
          user.name,
          rentalIndex,
          roomIndex,
          roomType.name
        )
        const description = generateDescription(
          roomType.name,
          selectedAmenities.map(a => a.name)
        )

        const post = await prisma.rentalPost.create({
          data: {
            title: postTitle,
            description: description,
            deposit: price * 0.5,
            pricePaid: price,
            startDate: new Date(),
            endDate: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000),
            status: 'ACTIVE',
            roomId: room.id,
            landlordId: user.id,
            rentalId: rental.id,
          },
        })

        createdData.posts.push(post)
        console.log(
          `    ‚úÖ Created room & post: ${roomType.name} - ${price.toLocaleString()}ƒë`
        )
      }
    }
  }

  return createdData
}

async function main() {
  console.log('üöÄ Starting recommendation data seeding...\n')

  try {
    await createAmenities()
    const users = await createUsers()
    const { rentals, rooms, posts } = await createRentalsAndRooms(users)

    console.log('\nüéâ Seeding completed successfully!')
    console.log('üìä Summary:')
    console.log(`   üë• Users: ${users.length}`)
    console.log(`   üè† Rentals: ${rentals.length}`)
    console.log(`   üè† Rooms: ${rooms.length}`)
    console.log(`   üìã Posts: ${posts.length}`)
    console.log(`   üîß Amenities: ${SAMPLE_AMENITIES.length}`)
    console.log(`   üìç Distance calculated to: ${REFERENCE_POINT.name}`)

    console.log('\nüí° Test with these room IDs:')
    const sampleRooms = rooms.slice(0, 5)
    sampleRooms.forEach((room, index) => {
      console.log(`   Room ${index + 1}: ID ${room.id} - ${room.title}`)
    })

    console.log('\nüåê API Test URLs:')
    sampleRooms.forEach(room => {
      console.log(
        `   GET /api/recommendations?roomId=${room.id}&limit=8&method=HYBRID`
      )
    })

    console.log('\nüî• Frontend Test:')
    console.log(`   useRecommendations(${sampleRooms[0]?.id || 'ROOM_ID'})`)

    console.log('\nüéØ Login info:')
    console.log('   Email: nguyenvana@gmail.com')
    console.log('   Password: 123456')
  } catch (error) {
    console.error('‚ùå Error:', error)
    throw error
  } finally {
    await prisma.$disconnect()
  }
}

main().catch(error => {
  console.error('‚ùå Seeding failed:', error)
  process.exit(1)
})
